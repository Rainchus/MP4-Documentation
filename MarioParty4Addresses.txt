Mario Party 4

Code at 8040xxxx is generally per board code (rel files, basically a DLL)
8007-8009ish area is global code which is always loaded (start.dol, static code)

8012F7B5

8012FC52 - dll/mpexdll.rel (extra room)
8012F7C8 - dll/instdll.rel
8012FCBF - dll/nisdll.rel
8012FD32 - dll/subchrseldll.rel (debug character select?)


8006f1cc ?
801d4069 - u8 itemID to get from item space
800837cc : bl	->0x8005FB90
func_800325f4 - randF (get random value 0 - 1.0f)
801d3778 s16 - dice block obj ID
func_800868f4 - used when dice block is hit
801E6BE8 - startOfStack
801D4428 - globalTimer
8018fcf8 - importantGlobalStruct
8016AB78 float diceRoll //0.5-9.5 then round up because...???
801D3AD0 - p1 1 frame button press
801D3A9C - p1 buttons held
801677c0 - p1 data for boards (might be board specific? this was on koopa board)

80054c64: bl	->0x80003490 //copy movie file header?

RAM : ROM
8018F8B0 : ptr to global strings file
801D3425 : 15D800 start of a file for global strings?
ROM C68911C - endmov_da0.thp file

SHY GUY BOARD
800308d0 - lis	r3, 0x8019
800308d4 - subi	r31, r3, 1008 //ptr to first player struct


///////////////////////////////////


801D34BC - "Start!\x00"


m401.dll - Manta Rings
m402.dll - Slime Time
m403.dll - Booksquirm
m404.dll - Trace Race
m405.dll - Mario Medley
m406.dll - Avalanche!
m407.dll - Domination
m408.dll - Paratroopa Plunge
m409.dll - Toad's Quick Draw
m410.dll - Three Throw
m411.dll - 

8005797c - playmoviefile?
801d3CC2 s16 - currentState? (if == 0002, end game )

8012FDE0 - pointer to some dll files?

typedef struct spaces {
	/* 0x00 */ f32 xPos;
	/* 0x04 */ f32 yPos;
	/* 0x08 */ f32 zPos;
	/* 0x0C */ char unk_0C[4];
	/* 0x10 */ f32 unk_10;
	/* 0x14 */ f32 unk_14;
	/* 0x18 */ f32 unk_18;
	/* 0x1C */ f32 pitch;
	/* 0x20 */ f32 yaw;
	/* 0x24 */ f32 roll;
	/* 0x28 */ s16 spaceType;
	/* 0x2A */ s16 ifJunction; //(behaves weirdly?)
	/* 0x2C */ s16 spaceABSIndex;
	/* 0x2E */ s16 unk_2E;
	/* 0x30 */ char unk_30[8];
} spaces; //sizeof 0x38
//static space array, 8019da10

typedef struct {
/* 0x00 */ s8 	characterID;
/* 0x01 */ s8 	unk01;
/* 0x02 */ s8 	unk02;
/* 0x03 */ s8 	unk03;
/* 0x04 */ s8 	controllerPort;
/* 0x05 */ s8 	items[3];
/* 0x08 */ s8 	flags;
/* 0x09 */ s8 	placement; //0x80 1st, 0x20 2nd, 0x40 3rd, 0x60 4th
/* 0x0A */ u8 	spacesLeftToMove;
/* 0x0B */ char unk_0B[5];
/* 0x10 */ s16 	nextABSSpaceIndex;
/* 0x12 */ char unk_12[2];
/* 0x14 */ s8 	blueSpacesLanded;
/* 0x15 */ s8 	redSpacesLanded;
/* 0x16 */ s8 	happeningSpacesLanded;
/* 0x17 */ s8 	chanceSpacesLanded;
/* 0x18 */ char unk_18;
/* 0x19 */ s8 	battleSpacesLanded;
/* 0x1A */ s8 	itemSpacesLanded;
/* 0x1B */ s8 	springSpacesLanded;
/* 0x1C */ s16	coins;
/* 0x1E */ char unk_1E[2];
/* 0x20 */ s16	totalCoinsCollected;
/* 0x22 */ s16 	coinPeak;
/* 0x24 */ char unk_24[6];
/* 0x2A */ s16 	stars;
/* 0x2C */ char unk_2C[4];
} playerMain; //size of 0x30
//size of 0x30
P1 - 8018FC38
P2 - 8018FC68
P3 - 8018FC98
P4 - 8018FCC8

typedef struct {
/* 0x00 */ char unk00[0x04];
/* 0x04 */ s8 curTurnCount;
/* 0x05 */ s8 maxTurnCount;
/* 0x06 */ char unk06[0x04];
/* 0x09 */ s8 doubleCoinsOnSpaceBool;
/* 0x0A */ s8 curPlayerIndex;
} globalStats; //8018fcf8

typedef struct {
/* 0x00 */ s8 ?
/* 0x01 */ s8 PlayerRollLock; //prevents dice roll from decreasing if 1
} diceBlockStatus;

enum Item {
/* 0x00 */ Item_MiniMushroom;
/* 0x01 */ Item_Mushroom;
/* 0x02 */ Item_SuperMiniMushroom;
/* 0x03 */ Item_SuperMegaMushroom;
/* 0x04 */ Item_MiniMegaHammer;
/* 0x05 */ Item_WarpPipe;
/* 0x06 */ Item_SwapCard;
/* 0x07 */ Item_SparkySticker;
/* 0x08 */ Item_Gaddlight;
/* 0x09 */ Item_ChompCall;
/* 0x0A */ Item_BowserSuit;
/* 0x0B */ Item_BoosCrystalBall;
/* 0x0C */ Item_MagicLamp;
/* 0x0D */ Item_ItemBag;
};


enum characters {
/* 0x00 */ Mario;
/* 0x01 */ Mario;
/* 0x02 */ Luigi;
/* 0x03 */ Luigi;
/* 0x04 */ Peach;
/* 0x05 */ Peach;
/* 0x06 */ Yoshi;
/* 0x07 */ Yoshi;
/* 0x08 */ Wario;
/* 0x09 */ Wario;
/* 0x0A */ DK;
/* 0x0B */ DK;
/* 0x0C */ Daisy;
/* 0x0D */ Daisy;
/* 0x0E */ Waluigi;
/* 0x0F */ Waluigi;
};

enum npcPortraitID {
/* 0x00 */ Toad;
/* 0x01 */ Bob-omb;
/* 0x02 */ ShyGuy;
/* 0x03 */ Boo;
/* 0x04 */ Goomba;
/* 0x05 */ Bowser;
/* 0x06 */ KoopaKid;
/* 0x07 */ Koopa;
/* 0x08 */ Klepto;
/* 0x09 */ BlueBoo; //(?)
/* 0x0A */ Dolphin;
/* 0x0B */ Red Boo;
/* 0x0C */ Thwomp;
/* 0x0D */ ToadWithTie;
/* 0x0E */ ShyGuyWithHat;
/* 0x0F */ BooInCostume;
/* 0x10 */ GoombaWithHat;
/* 0x11 */ KoopaKid2;
/* 0x12 */ KoopaWithTie;
};

enum messageStyle {
/* 0x00 */ style0 //https://imgur.com/gmYOm3v
/* 0x01 */ style1 //https://imgur.com/rVdSE2r
/* 0x02 */ style2 //https://imgur.com/r45Gm1o
/* 0x03 */ style3 //https://imgur.com/prTtpJd
/* 0x04 */ style4 //https://imgur.com/euaS5Ld
/* 0x05 */ style5 //https://imgur.com/6wfNewK
/* 0x06 */ style6 //https://imgur.com/hHm1sMo
/* 0x07 */ style7 //https://imgur.com/QuTJXFL
/* 0x08 */ style8 //https://imgur.com/Jbp9iQ7
/* 0x09 */ style9 //https://imgur.com/yC83Fbz
}



804305a0: bl	->0x80430D48 //shy guy event

//im thinking different messageStyles may take different args
For showMessage
r3: messageStyle
r4: messageID (00160003) load group 16 message 3
r5: npcPortraitID

func_8002f454 - set_model_attributes
r3 = model ptr
r4 = 

func_800bae5c - getTime //used for seeding initial rng
func_804324C0 - NegativeScreenColors
func_80082d34 - ItemSpaceEvent
func_80070530 - showMessage //ISO 8B390
func_800706E8 - showMessageInner
func_80070738 - CloseMessage
func_800e4014 - printDebugCrashInfo //one of many
func_800057c0 - mainGameLoop //actual loop part is at 800058c0
func_8008a060 - handleInputWhileViewingItems
func_8000B150 - drawBox
func_800CC0C0 - spriteShading?
8002fc1c - print?
80074034 - bctrl (handle event)
8019da10 - spaceData
func_8005fb40 - rand_int (r3 = range)
//takes arg r3, range of number to choose
/returns result on r3
801D3F14 - RNG seed
800d3e80 - loadSaveData (?) (maybe calcs checksum?)
80003278 - initializeStack
800bb2f4 - no idea
80003490 - loadsStuff
800033a8 - something
800e7e60
800e6bd0 code of interest here
800bdca4 - somethingREL related?
80032228 - call to LinkOS
8041f180
80032204 - call to DMA data to RAM
80003278 - __init_registers
8019d998 - assignCharacterIndexIDs? (used in game start after roll order is decided)
8011F7C4 - beginning of rel file pointers
	Format is:
	0x00 - ptr to rel in memory
	0x04 - offset into directory


Start.dol documentation
0x100 - 0x27C0 File1

Build Date: %s %s
Dec 17 2001

80086968 //dice block related
